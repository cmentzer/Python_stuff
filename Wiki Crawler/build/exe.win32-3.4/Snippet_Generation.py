def main():
	#SRP Page Context Formatter

	#This python file will operate upon a plain text file
	#containing field names and values for the SRP page content
	#dictionary. It will output a plain text file with the
	#data contained in the oringial file formatted into the proper
	#MAT code that will initialize the actual dictionary. 
	import re, collections, os, sys

	#Declaration of important variables
	#path to the plain text file that will be formatted
	input_path = os.path.dirname(os.path.realpath(sys.argv[0]))+"\input.txt"
	output_path = ""
	folder = os.path.dirname(os.path.realpath(sys.argv[0]))+"\\snippets"
	os.makedirs(folder)

	#counter to keep track of the number of records that have been formatted
	record_counter = 0

	#read the file's contents
	file=open(input_path,'r')
	input_lines=file.read()
	file.close()

	#======================================================#
	##### Find the identifier for the records, and get  ####
	### number of records from the number of identifiers ###
	#======================================================#

	#Look at the input and find all instances of mnemonics
	snippets = re.findall("<a>(.+)\n",input_lines)
	contents = re.findall("<b>(.+?)</b>",input_lines,re.DOTALL)
	tabTriggers = re.findall("(<tabTrigger>.+</tabTrigger>)",input_lines)
	descriptions = re.findall("(<description>.+</description>)",input_lines)
	total_snippets = len(snippets)
	print(len(snippets))
	print(len(descriptions))
	print(len(contents))
	print(len(tabTriggers))

	#Treat each entry as a snippet
	i = 0
	while i < total_snippets and i < len(descriptions):
		print(i)
		snippet = snippets[i]
		print(snippet)
		print(tabTriggers[i])
		#For each record, create and output file and write to it
		#Set the output path 
		output_path = folder+"\\"+snippet+".sublime-snippet"

		#Empty the output file and print an opening line to the top of that file
		firstLine = "<!--- Text generated by python script. --->"
		file = open(output_path,'w')
		file.write(firstLine)
		file.close()

		#Open the file again to begin appending text to the end of the file
		file = open(output_path,'a')
		file.write(	"<snippet>\n"+
					"\t<content>"+
						"<![CDATA[\n\t\t"+contents[i]+"\n]]>"+
					"</content>\n"+
					"\t<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->\n"+
					"\t"+tabTriggers[i]+"\n"+
					"\t<!-- Optional: Set a scope to limit where the snippet will trigger -->\n"+
					"\t<!-- <scope>source.python</scope> -->\n"+
					"\t<!-- Optional: Description to show in the menu -->\n"+
					"\t"+descriptions[i]+"\n"+
					"</snippet>\n")
		i+=1
	file.close()
