def main():
	#SRP Page Context Formatter

	#This python file will operate upon a plain text file
	#containing field names and values for the SRP page content
	#dictionary. It will output a plain text file with the
	#data contained in the oringial file formatted into the proper
	#MAT code that will initialize the actual dictionary. 
	import re, collections, os, sys

	#Declaration of important variables
	#path to the plain text file that will be formatted
	input_path = os.path.dirname(os.path.realpath(sys.argv[0]))+"\input"
	output_path = os.path.dirname(os.path.realpath(sys.argv[0]))+"\\ouput.txt"

	#read the input file's contents
	file=open(input_path,'r')
	input_lines=file.read()
	file.close()

	#input_lines is a single string containing all of the text in the file
	#this re.sub operation removes whitespace and page breaks that are a 
	#symptom of the report writer
	input_lines = re.sub("(.+?Srp Content.+?\n.+\n.+\n)","",input_lines,re.MULTILINE)

	#This script operates by first finding each mnemonic and then separating the file
	#into pblocks of text, one block per entry. We will then operate on those blocks
	entries = re.findall("(Content\s\s.+?Hover URL.+?\n\n)", input_lines, flags=re.DOTALL)

	#Empty the output file and print an opening line to the top of that file
	firstLine = "Text generated by python script.\n\n\n"
	file = open(output_path,'w')
	file.write(firstLine)
	file.close()

	#for each entry the text, we need to pull all the relevent information into data
	#structures that are easier to operate on. The following re.findall operations
	#build arrays of data that are cleared every time we begin operating on a new entry
	#if an entry does not have a value for a given field, we use "" as a placeholder
	for entry in entries:
			name = re.findall("Content\s{6}([a-zA-Z]+)",entry)
			name = name[0]
			active = re.findall("Active\s{8}([a-zA-Z]+)",entry)
			active = active[0]
			title = re.findall("Active.+?\n.+?([a-zA-Z ]+)\s{30,50}",entry)
			title = title[0].strip()
			type = re.findall("Type\s{8}([a-zA-Z]+)",entry)
			type = type[0]
			flow_items = re.findall("Flow Item.+?([a-z]+)",entry)
			image_dict_entries = re.findall("Image Dictionary.+?([a-zA-Z]+)",entry,re.DOTALL)
			i=0
			#handle the case where there is no value for the image dictionary
			while(i < len(image_dict_entries)):
				if(image_dict_entries[i] == "Click"):
					image_dict_entries[i] = ""
				i+=1
			click_handles = re.findall("Click Handle.+?([a-zA-Z]+)",entry,re.DOTALL)
			i=0
			while(i < len(click_handles)):
				if(click_handles[i] == "Scalable"):
					click_handles[i] = ""
				i+=1
			alt_texts = re.findall("Alt Text\s{10}([\" A-Za-z]+)",entry)
			i=0
			while(i < len(alt_texts)):
				alt_texts[i] = alt_texts[i].strip()
				if(alt_texts[i] == "Height" or len(alt_texts[i]) > 25):
					alt_texts[i] = ""
				i+=1
			heights = re.findall("Height.+?([a-zA-Z0-9]+)",entry,re.DOTALL)
			i=0
			while(i < len(heights)):
				if(heights[i] == "Width"):
					heights[i] = ""
				i+=1
			i=0
			widths = re.findall("Width.+?([a-zA-Z0-9]+)",entry,re.DOTALL)
			while(i < len(widths)):
				if(widths[i] == "Source"):
					widths[i] = ""
				i+=1
			source_urls = re.findall("Source URL.+?([\.\\/a-zA-Z0-9]+)",entry,re.DOTALL)
			i=0
			while(i < len(source_urls)):
				if(source_urls[i] == "Hover"):
					source_urls[i] = ""
				i+=1
			hover_urls = re.findall("Hover URL.+?([\.\\\/a-zA-Z0-9]+)",entry,re.DOTALL)
			i=0
			if(len(hover_urls) < len(source_urls)):
				hover_urls.append("")
			while(i < len(hover_urls)):
				if(hover_urls[i] == "Flow"):
					hover_urls[i] = ""
				i+=1

			#Build the string that will be written to the file 
			output_array = []
			start_string = (":Code "+name+"\n"+
							"//:\n"+
							"// {{RID},{FieldList}}  ->  CreateRecord Main\n"+
							"// {{RID},{FieldList}}  ->  CreateRecord ImageFlow\n"+
							"//\n"+
							"{\n"+
								"{\n")
			output_array.append(start_string)
			output_array.append("{\""+name+"\"},\n")
			output_array.append("{\""+name+"\",\""+active+"\",\""+title+"\",\""+type+"\"}\n")
			output_array.append("},\n//")
			i=0
			while i < len(flow_items):
				if(i > 0):
					output_array.append(",")
				output_array.append("\n{\n")
				output_array.append("{\""+name+"\",\"English\",\""+flow_items[i]+"\"}\n")
				output_array.append("{\""+source_urls[i]+"\",\n")
				output_array.append("\""+alt_texts[i]+"\","+heights[i]+","+widths[i]+",\n")
				output_array.append("\""+hover_urls[i]+"\",\"\",\n")
				output_array.append("\""+click_handles[i]+"\",\""+image_dict_entries[i]+"\"\n")
				output_array.append("}")
				i+=1
			output_array.append("\n}\n};\n\n//------------------------------------------------\n")
			#build a single string by joining the entries in the output array
			output = ("".join(output_array))
			#Open the file again to begin appending text to the end of the file
			file = open(output_path,'a')
			#write the output string the the output file
			file.write(output)
			file.close()

